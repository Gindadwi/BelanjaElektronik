// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleUser {
  superadmin
  customer
}

model User {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(255)
  email    String   @db.VarChar(255)
  password String   @db.VarChar(255)
  role     RoleUser @default(customer)

  orders    Order[]
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  logo String @db.VarChar(255)

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model location {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  procucts  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum ProduckStock {
  ready
  preorder
}

model Product {
  id          Int      @id @default(autoincrement())
  brand_id    Int
  brand       Brand    @relation(fields: [brand_id], references: [id])
  category_id Int
  category    Category @relation(fields: [category_id], references: [id])
  location_id Int
  location    location @relation(fields: [location_id], references: [id])

  orders OrderProduct[]

  name        String       @db.VarChar(255)
  description String       @db.Text
  price       BigInt       @db.BigInt
  stock       ProduckStock
  image       String       @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StatusOrder {
  pending
  success
  failed
}

model Order {
  id      Int            @id @default(autoincrement())
  code    String         @unique @db.Text
  user_id Int
  user    User           @relation(fields: [user_id], references: [id])
  status  StatusOrder
  detail  OrderDetail?
  product OrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderDetail {
  id       Int    @id @default(autoincrement())
  order_id Int    @unique
  order    Order  @relation(fields: [order_id], references: [id])
  price    BigInt @db.BigInt

  name        String @db.VarChar(255)
  phone       String @db.VarChar(255)
  address     String @db.VarChar(255)
  city        String @db.VarChar(255)
  postal_code String @db.VarChar(255)
  note        String @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  id Int @id @default(autoincrement())

  product_id Int
  product    Product  @relation(fields: [product_id], references: [id])
  order_id   Int
  order      Order    @relation(fields: [order_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
